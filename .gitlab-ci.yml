# This file is auto-generated by DevPlatform for further customizing as you wish.
# NOTE: You should not delete this file!

variables:
  DOCKER_TLS_CERTDIR: /docker-certs
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: ${DOCKER_TLS_CERTDIR}/client
  DOCKER_PROXY: docker-proxy.artifactory.tcsbank.ru
  DOCKER_REGISTRY: docker-hosted.artifactory.tcsbank.ru
  
  HTTPS_PROXY: http://proxy.tcsbank.ru:8080
  HTTP_PROXY: http://proxy.tcsbank.ru:8080
  http_proxy: http://proxy.tcsbank.ru:8080
  https_proxy: http://proxy.tcsbank.ru:8080
  no_proxy: 'docker,.tinkoff.cloud,.tcsbank.ru,.tinkoff.ru'
  
  GOPROXY: "https://athens.tcsbank.ru:3000"
  GOPRIVATE: "*.tcsbank.ru,*.tinkoff.cloud"
  GOLANG_VERSION: "1.17"
  
  SERVICE_NAME: clickhouse-proxy-server
  IMAGE_TAG: $CI_COMMIT_SHA
  DOCKER_IMAGE: "${DOCKER_REGISTRY}/${CI_PROJECT_NAMESPACE}/${SERVICE_NAME}/${CLUSTER}:${PREFIX}-${IMAGE_TAG}"

  CLICKHOUSE_NODES: "[\"rc1a-0frj3mcfce5fg8f9.mdb.yandexcloud.net:8123\",\"rc1a-dntfp0qefgqql8pa.mdb.yandexcloud.net:8123\",\"rc1a-e3efds88ij1jfb9t.mdb.yandexcloud.net:8123\",\"rc1b-gfntqgsjpc1jf4j7.mdb.yandexcloud.net:8123\",\"rc1b-nlp8ractq35qp66l.mdb.yandexcloud.net:8123\",\"rc1a-a4tgkl56e7gon3po.mdb.yandexcloud.net:8123\",\"rc1a-nf4gvv3b9vfp1aag.mdb.yandexcloud.net:8123\",\"rc1b-toobdjh1m4ea4fdb.mdb.yandexcloud.net:8123\",\"rc1a-rne1s41ncfo31rgc.mdb.yandexcloud.net:8123\",\"rc1a-tu5o61jb0smd0e3a.mdb.yandexcloud.net:8123\",\"rc1b-b5hdlvnhmamlps6t.mdb.yandexcloud.net:8123\"]"
  CLICKHOUSE_USER_PROD: $CLICKHOUSE_USER_PROD
  CLICKHOUSE_PASSWORD_PROD: $CLICKHOUSE_PASSWORD_PROD
  CLICKHOUSE_USER_TEST: $CLICKHOUSE_USER_TEST
  CLICKHOUSE_PASSWORD_TEST: $CLICKHOUSE_PASSWORD_TEST
  CLICKHOUSE_PROJECT_OWNER_USER_DEV: $CLICKHOUSE_PROJECT_OWNER_USER_DEV
  CLICKHOUSE_PROJECT_OWNER_PASSWORD_DEV: $CLICKHOUSE_PROJECT_OWNER_PASSWORD_DEV
  CLICKHOUSE_PROJECT_OWNER_USER: $CLICKHOUSE_PROJECT_OWNER_USER_PROD
  CLICKHOUSE_PROJECT_OWNER_PASSWORD: $CLICKHOUSE_PROJECT_OWNER_PASSWORD_PROD
  CLICKHOUSE_DWH_USER: $CLICKHOUSE_DWH_USER
  CLICKHOUSE_DWH_PASSWORD: $CLICKHOUSE_DWH_PASSWORD
  CLICKHOUSE_CHARTS_USER: $CLICKHOUSE_CHARTS_USER
  CLICKHOUSE_CHARTS_PASSWORD: $CLICKHOUSE_CHARTS_PASSWORD
  CLICKHOUSE_SME_USER: $CLICKHOUSE_SME_USER
  CLICKHOUSE_SME_PASSWORD: $CLICKHOUSE_SME_PASSWORD
  CLICKHOUSE_DCO_USER: $CLICKHOUSE_DCO_USER
  CLICKHOUSE_DCO_PASSWORD: $CLICKHOUSE_DCO_PASSWORD
  REDIS_PASSWORD: $YANDEX_CLOUD_REDIS_CACHE_PASSWORD_PROD

stages:
  - build
  - deploy-secrets
  - deploy

.build-base:
  image:
    name: docker-hosted.artifactory.tcsbank.ru/cicd-images/base-kaniko:release-v1.8.12
  before_script:
    - dp auth service-acc --key-file $DP_DEPLOY_SERVICE_KEY # в переменной должен лежать ключ сервис-аккаунта
    - dp auth configure-kaniko # настройка kaniko (токен действует 1 час)
  script:
    - echo "build and push to ${DOCKER_IMAGE}"
    - IMAGE_CHECK_OUTPUT=$(dp jfrog rt s "${IMAGE_NAME_FOR_CHECK}" 2>&1)
    - echo ${IMAGE_CHECK_OUTPUT}
    - |- 
      if $( echo ${IMAGE_CHECK_OUTPUT} | grep -q "Found 0 artifacts" )
      then
        executor --dockerfile $CI_PROJECT_DIR/Dockerfile \
                  --destination "${DOCKER_IMAGE}" \
                  --log-timestamp \
                  -v warn
        echo "pushed to ${DOCKER_IMAGE}"
      else
        echo "image ${DOCKER_IMAGE} already exist"
      fi
  variables:
    IMAGE_NAME_FOR_CHECK: "docker-hosted/${CI_PROJECT_NAMESPACE}/${SERVICE_NAME}/${CLUSTER}/${PREFIX}-${IMAGE_TAG}/*"
    PREFIX: stable
    CLUSTER: prod2

build:
  extends:
    - .build-base
  stage: build
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

.deploy-secret-base:
  image: docker-hosted.artifactory.tcsbank.ru/cicd-images/base-focal
  stage: deploy-secrets
  before_script:
    - dp auth service-acc --key-file "${DP_DEPLOY_SERVICE_KEY}"
    - echo "deb [trusted=yes] http://apt-proxy.tcsbank.ru/repository/apt-ubuntu/ focal main restricted universe multiverse" > /etc/apt/sources.list && echo "deb [trusted=yes] http://apt-proxy.tcsbank.ru/repository/apt-ubuntu/ focal-updates main restricted universe multiverse" >> /etc/apt/sources.list && echo "deb [trusted=yes] http://apt-proxy.tcsbank.ru/repository/apt-ubuntu/ focal-backports main restricted universe multiverse" >> /etc/apt/sources.list && echo "deb [trusted=yes] http://apt-proxy.tcsbank.ru/repository/apt-ubuntu/ focal-security main restricted universe multiverse" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install gettext-base -y
  script:
    - dp auth configure-kubeconfig --cluster-name $K8S_CLUSTER_NAME_PROD --account-name "$DP_DEPLOY_SA_NAME"
    - envsubst < ./secret.template.yml | kubectl apply -f -
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      allow_failure: true
      when: manual

deploy-secret-m1-prod2:
  extends:
    - .deploy-secret-base
  variables:
    K8S_CLUSTER_NAME_PROD: m1-prod2.prod

deploy-secret-ds-prod2:
  extends:
    - .deploy-secret-base
  variables:
    K8S_CLUSTER_NAME_PROD: ds-prod2.prod

deploy-secret-ix-prod2:
  extends:
    - .deploy-secret-base
  variables:
    K8S_CLUSTER_NAME_PROD: ix-m2-prod2.prod

deploy-prod:
  image: docker-hosted.artifactory.tcsbank.ru/unic/unic-main-container-1:latest
  stage: deploy
  variables:
    PREFIX: stable
    CLUSTER: prod2
  script:
    - echo "${IMAGE}"
    - unic deploy --app "${SERVICE_NAME}" --stand "${CLUSTER}" --dockerImage "${DOCKER_IMAGE}"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      allow_failure: true
      when: manual
